Phase 3.4: GitHub Token & Permissions Fixes
    Functionality:
       * Reintroduced GITHUB_TOKEN for authenticated GitHub API access.
       * Fixed permission scopes for OAuth2 bot integration:
            Required applications.commands, bot, and optionally administrator.

    Code Highlights:
       * Authorization header added to GitHub API requests.
       * Slash command registration errors resolved by correcting OAuth2 scopes.

Phase 3.3: Refactor for Maintainability
    Functionality:
       * Restructured bot to better separate concerns (I/O, logic, Discord handling).
       * Improved error handling and logging clarity.

    Code Highlights:
       * Utility functions created for reading/writing JSON files.
       * Clearer initialization in bot.py using main() and session lifecycle.

Phase 3.2: JSON-Based Dynamic Repo Configuration
    Functionality:
       * Replaced static REPO_CHANNELS dictionary with repo_config.json.
       * Admins can now dynamically add/remove repositories using slash commands.

    Code Highlights:
       * New file repo_config.json stores repo-channel mappings.
       * Slash commands implemented:
            /add_repo repo:owner/repo
            /remove_repo repo:owner/repo
            /set_channel repo:owner/repo channel:#channel

Phase 3.1: Admin & Slash Command Setup
    Functionality:
       * Introduced slash commands using discord.app_commands.
       * Verified user permissions using a list of admin Discord user IDs.

    Code Highlights:
       * Config now stores ADMINS and initial slash command structure.
       * Introduced CommandTree via discord.Client.


Phase 3: Major Restructure & Interactivity
-------------------------------------------------------------------------------
Phase 2 : Added GitHub Follower Monitoring
    Functionality:
       * Introduced follower tracking for specific GitHub usernames.
       * Sent follower count changes to all channels monitoring repos.

    Code Highlights:
       * GitHubMonitor now handles both commits and followers.
       * Added PROFILE_USERNAMES to config.
       * Continued using static mappings for repositories.
-------------------------------------------------------------------------------
Phase 1: Basic GitHub Commit Monitoring
    Functionality:
       * Monitored a fixed set of GitHub repositories.
       * Detected new commits using the GitHub API.
       * Sent commit updates to hardcoded Discord channels.

    Code Highlights:
       * Simple polling loop using discord.ext.tasks.
       * Repository-channel mapping via static REPO_CHANNELS dictionary.
       * Used aiohttp session manually in github_monitor.py.
